# app/ai/service_gemini.py
import os
import requests

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
# .env/GEMINI_MODEL "gemini-1.5-flash" –±–æ–ª—Å–æ –¥–∞ –±–æ–ª–æ—Ç, "models/gemini-1.5-flash" –±–æ–ª—Å–æ –¥–∞ –±–æ–ª–æ—Ç
_gemini_model = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
if not _gemini_model.startswith("models/"):
    _gemini_model = f"models/{_gemini_model}"

BASE_URL = "https://generativelanguage.googleapis.com/v1"
API_URL = f"{BASE_URL}/{_gemini_model}:generateContent"

HEADERS = {
    "Content-Type": "application/json",
    # –∞—á–∫—ã—á—Ç—ã query-string'–∫–µ —ç–º–µ—Å, –∑–∞–≥–æ–ª–æ–≤–æ–∫–∫–æ –±–µ—Ä–µ–±–∏–∑
    "x-goog-api-key": GEMINI_API_KEY,
}

def ask_gemini(message: str) -> str:
    """
    –¢–µ–∫—Å—Ç —Å—É—Ä–æ–æ –±–µ—Ä–µ—Ç, —Ç–µ–∫—Å—Ç –∂–æ–æ–ø –∞–ª–∞—Ç.
    """
    payload = {
        "contents": [
            {
                "parts": [
                    {"text": message}
                ]
            }
        ]
        # –∫–∞–∞–ª–∞—Å–∞“£, –∫–æ—à—Å–æ“£ –±–æ–ª–æ—Ç:
        # ,"generationConfig": {"temperature": 0.8}
    }

    try:
        resp = requests.post(API_URL, headers=HEADERS, json=payload, timeout=25)
        if resp.status_code != 200:
            return f"Gemini error {resp.status_code}: {resp.text}"

        data = resp.json()
        # –∂–æ–æ–ø—Ç—É–Ω —Ç–µ–∫—Å—Ç–∏–Ω —Å—É—É—Ä—É–ø –∞–ª–∞–±—ã–∑
        text = (
            data.get("candidates", [{}])[0]
            .get("content", {})
            .get("parts", [{}])[0]
            .get("text", "")
        )
        return text or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini üòï"
    except Exception as e:
        return f"Gemini request error: {e}"