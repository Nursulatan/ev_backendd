import os
import requests

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")

# –¢—É—É—Ä–∞ endpoint: v1beta –∂–∞–Ω–∞ –º–æ–¥–µ–ª—å URL'–¥–∞ –≥–∞–Ω–∞, payload'–¥–∞ –ñ–û–ö!
API_URL = (
    f"https://generativelanguage.googleapis.com/v1beta/models/"
    f"{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"
)

HEADERS = {"Content-Type": "application/json"}

def ask_gemini(message: str) -> str:
    # payload'–¥–∞ "model" –¢–ê–ü–¢–´–ö –ñ–û–ö
    payload = {"contents": [{"parts": [{"text": message}]}]}
    try:
        resp = requests.post(API_URL, headers=HEADERS, json=payload, timeout=20)
        data = resp.json()

        if resp.status_code == 200:
            # –∂–æ–æ–ø—Ç—É –∫–æ–æ–ø—Å—É–∑ –∞–ª—ã–ø —á—ã–≥—É—É
            return (
                data.get("candidates", [{}])[0]
                    .get("content", {})
                    .get("parts", [{}])[0]
                    .get("text", "–ñ–æ–æ–ø –±–æ—à –∫–µ–ª–∏–ø –∂–∞—Ç–∞—Ç üòÖ")
            )

        # –ö–∞—Ç–∞ –±–æ–ª—Å–æ ‚Äî Google‚Äô–¥—É–Ω –±–∏–ª–¥–∏—Ä“Ø“Ø—Å“Ø–Ω —Ç“Ø–∑ —ç–ª–µ —á—ã–≥–∞—Ä–∞–ª—ã
        err_msg = data.get("error", {}).get("message") or data
        return f"Gemini error {resp.status_code}: {err_msg}"

    except Exception as e:
        return f"Gemini request error: {e}"
